Beego Framework Tutorials - 2 - Routing (part 2 of 3)
A Go HTTP framework for developing HTTP application rapidly

By Lei Cao
http://github.com/lei-cao

* Content
- beego's router URI types

* beego's router URI types
-- Basic routers
-- Parameter routers, Regex routers

* Basic router

Basic GET request

	beego.Get("/", func(ctx *context.Context){
		ctx.Output.Body([]byte("hello world"))
	})

Basic POST request

	beego.Post("/foo", func(ctx *context.Context){
		ctx.Output.Body([]byte("bar"))
	})

Any HTTP request

	beego.Any("/alice", func(ctx *context.Context){
		ctx.Output.Body([]byte("bob"))
	})	
		

* Parameter routers, Regex routers
This parameter router suits for function and Controller. The parameters can be got from ctx.Input.Param()

beego inspired by sinatra's router:

- beego.Router("/api/:id", &controllers.RController{})

	Default matching  //matching /api/123    :id = 123  also matching /api/
	
- beego.Router("/api/:id!", &controllers.RController{})

	Default matching  //matching /api/123    :id = 123  doesn't match /api/

- beego.Router("/api/:id([0-9]+)", &controllers.RController{})

	Regex matching //matching /api/123

* Parameter routers, Regex routers

- beego.Router("/news/:all", &controllers.RController{})

	Full matching //matching /news/path/to/123.html :all= path/to/123.html

- beego.Router("/user/:username([\w]+)", &controllers.RController{})

	Regex string matching //matching /user/astaxie :username = astaxie

- beego.Router("/download/*.*", &controllers.RController{})

	* matching //matching /download/file/api.xml :path= file/api :ext=xml

- beego.Router("/download/*", &controllers.RController{})

	* full matching //matching /download/file/api.json :splat=file/api.json

* Parameter routers, Regex routers

- beego.Router("/:id:int", &controllers.RController{})

	int type, matching :id is int type, same as regex ([0-9]+)

- beego.Router("/:hi:string", &controllers.RController{})

	string type, matching :hi is string typeã€‚same as ([\w]+)

- beego.Router("/cms_:id([0-9]+).html", &controllers.CmsController{})

	custom regex with prefix //matching :id is regex type, matching cms_123.html, :id = 123
